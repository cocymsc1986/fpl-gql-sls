name: Deploy Infrastructure

on:
  push:
    branches:
      - feature/use-tf-to-deploy

permissions:
  contents: read
  pull-requests: write

jobs:
  test_and_build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
      - name: Install Dependencies
        run: yarn
      - name: Run Unit Tests
        run: yarn test
      - name: Build Project
        run: yarn build
      - name: Upload build articfact
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: dist
  terraform:
    needs: test_and_build
    runs-on: ubuntu-latest
    name: Terraform
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: us-east-1
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build
          path: dist
      - name: Configure AWS Credentials Action For GitHub Actions
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.1.9
          terraform_wrapper: false
      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: terraform
        shell: bash
      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -input=false -no-color -out tf.plan
        working-directory: terraform
        shell: bash
      - name: Terraform Show
        id: show
        run: terraform show -no-color tf.plan 2>&1 > /tmp/plan.txt
        working-directory: terraform
        shell: bash
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ inputs.GITHUB_TOKEN }}
          script: |
            const fs = require("fs");
            const plan = fs.readFileSync("/tmp/plan.txt", "utf8");
            const maxGitHubBodyCharacters = 65536;

            function chunkSubstr(str, size) {
              const numChunks = Math.ceil(str.length / size)
              const chunks = new Array(numChunks)
              for (let i = 0, o = 0; i < numChunks; ++i, o += size) {
                chunks[i] = str.substr(o, size)
              }
              return chunks
            }

            // Split the Terraform plan into chunks if it's too big and can't fit into the GitHub Action
            var plans = chunkSubstr(plan, maxGitHubBodyCharacters); 
            for (let i = 0; i < plans.length; i++) {
              const output = `### ${{ inputs.plan-title }} Part # ${i + 1}
              #### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
              #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
              #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
              <details><summary>Show Plan</summary>
              \`\`\`\n
              ${plans[i]}
              \`\`\`
              </details>
              *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ inputs.working-directory }}\`, Workflow: \`${{ github.workflow }}\`*`;   

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -input=false tf.plan
        working-directory: terraform
        shell: bash
